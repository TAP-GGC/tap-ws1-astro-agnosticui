---
// Style Imports
import '../../styles/global.css';
import '@fontsource/source-sans-pro';
import '@fontsource/pixelify-sans';
import '@fontsource/ibm-plex-mono';
import '@fontsource/work-sans';
import '@fontsource/cormorant-garamond';
import '@fontsource/spectral';
import '@fontsource/crimson-pro';
import '@fontsource/alfa-slab-one';

// common.min.css is distributed with agnostic-react
// and agnostic-svelte too. But, since we're using all
// of these together, we only need to import global CSS
// once and in one place.
// common.min.css combines properties, resets, utilities
// import "agnostic-vue/dist/common.min.css";
// But!! Rob much prefers individual modular import ;)
import "agnostic-vue/dist/common.properties.min.css";
import "agnostic-vue/dist/common.resets.min.css";
import "agnostic-vue/dist/common.utilities.min.css";
import "agnostic-vue/dist/opinions.min.css";

// Component Imports
import "agnostic-vue/dist/index.css";
import TAPDefaultLayout from "../../layouts/default.astro";
import Crumbs from '../../components/Crumbs.vue';
// Read from content collection
import { getCollection } from 'astro:content';
//gallery
import Gallery from '../../components/astro/Gallery.astro';
//projects
import projectIds from '../../components/astro/ProjectIds';
import ProjectCard from '../../components/ProjectCard.vue';
//faculty
import FacultyCard from '../../components/FacultyCard.vue';
import facultyIds from '../../components/astro/FacultyIds';
//students
import studentIds from '../../components/astro/StudentIds';
import StudentCard from '../../components/StudentCard.vue';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const awardEntries = await getCollection('awards')
  return awardEntries.map(entry => ({
    params: { awardId: `${entry.data.year}/${entry.data.semester}/${entry.data.id}` }, props: { entry },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;
const { awardId } = Astro.params;
const { Content } = await entry.render();
   

//BreadCrumb variables
const awardName = entry.data.title;
const awardTag = entry.data.tags;

// Page title
let title = `${entry.data.title} (${entry.data.updateDate? entry.data.updateDate.toDateString() : entry.data.postDate.toDateString()}) - GGC Technology Ambassadors Program`;

---
<TAPDefaultLayout title={title}>
	<Crumbs pageType="award" pageUrl=`/awards/${awardId}` />
  <div class="blog">

    <Content />

    {entry.data?.students && (
      <h2>Student(s) Profiles:</h2>
      <section class="sectionCards">
        {entry.data.students.map((student) => (      
          <StudentCard item={studentIds[student]}/>
        ))}

      </section>
     )}

    {entry.data?.projects && (
      <h2>Outreach Projects Included</h2>
      <section class="sectionCards">
        {entry.data.projects.map((project_id) => (      
          <ProjectCard item={projectIds[project_id]} />
        ))}
      </section>
    )}

    {entry.data?.instructors && (
      <h2>Faculty Facilitators</h2>
      <section class="sectionCards">
        {entry.data.instructors.map((instructor) => (      
          <FacultyCard item={facultyIds[instructor]} />
        ))}
      </section>
    )}

    

    {entry.data?.images && (
      <h2>Gallery</h2>
      <Gallery photos={entry.data.images} />
    )}

  </div>
  
</TAPDefaultLayout>

<style>
.sectionCards{
  /* margin-block-end: var(--fluid-40) !important; */
  flex-wrap: wrap;
  flex-shrink: 1;
  flex-grow: 1;
  flex-direction: row;
  display: flex;
  justify-content: space-evenly;
}

</style>
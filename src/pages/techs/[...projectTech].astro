---
import '../../styles/global.css';
import '@fontsource/source-sans-pro';
import '@fontsource/work-sans';
import '@fontsource/cormorant-garamond';

import "agnostic-vue/dist/index.css";
import { getCollection } from 'astro:content';
import TAPDefaultLayout from "../../layouts/default.astro";
import Crumbs from "../../components/Crumbs.vue";
import { Disclose } from 'agnostic-vue';
import ProjectCard from '../../components/ProjectCard.vue';
import projectIds from '../../components/astro/ProjectIds';
import EmptyImage from '/public/techs/empty.png';

// 1. Generate a new path for every technology entry
export async function getStaticPaths() {
  const techs = await getCollection('technologies');
  return techs.map(tech => ({
    params: { "projectTech": `${tech.data.id}` },
    props: { tech },
  }));
}

const { tech } = Astro.props;
const { Content } = await tech.render();
const allProjects = await getCollection('projects');

const relatedProjects = allProjects.filter(project =>
  project.data.techs?.some(techId => techId.toLowerCase() === tech.data.id.toLowerCase())
);

const groupedProjects = {};
relatedProjects.forEach(project => {
  const semester = project.data.semester?.toUpperCase() || "UNKNOWN";
  const year = project.data.year || "UNKNOWN";
  const key = `${semester} ${year}`;
  if (!groupedProjects[key]) groupedProjects[key] = [];
  groupedProjects[key].push(project);
});

const techImg = tech.data.image?.src || EmptyImage.src;
let title = `${tech.data.name} - Technology Profile`;
---

<TAPDefaultLayout title={title}>
  <Crumbs pageType="tech" pageUrl={`/techs/${tech.data.id}`} />

  <div class="body-tech">
    {tech.data.name && <h1 class="techName">{tech.data.name}</h1>}

    <div class="techDetails">
      {techImg && <img src={techImg} alt="Technology Image" class="techImage" />}
      
    </div>

    <Content />
    <div style="clear: both; margin: 2rem;"></div>

    {Object.keys(groupedProjects).length > 0 && (
      <Disclose isBackground title="TAP Projects Using This Technology">
        {Object.entries(groupedProjects).map(([term, projects]) => (
          <div class="tap-class-line">
            <b>{term}</b>:{" "}
            <span class="green-text">
              {(projects as typeof relatedProjects).map((p, index) => {
                const url = `/projects/${p.data.year}/${p.data.semester?.toLowerCase()}/${p.data.id}`;
                return (
                  <>
                    <a href={url} target="_blank" rel="noopener noreferrer">
                      {p.data.shortTitle}
                    </a>
                    {index < (projects as typeof relatedProjects).length - 1 && ", "}
                  </>
                );
              })}
            </span>
          </div>
        ))}
      </Disclose>
    )}

    {relatedProjects.length > 0 && (
      <h2>Related Projects Included</h2>
    )}

    {relatedProjects.length > 0 && (
      <section class="mbe40 project-cards-flex flex flex-row flex-grow-1 flex-shrink-1 flex-wrap flex-fill">
        {relatedProjects.map(project => (
          <ProjectCard item={projectIds[project.data.id]} />
        ))}
      </section>
    )}
  </div>
</TAPDefaultLayout>

<style>
.body-tech p,
.body-tech ul,
.body-tech ol,
.body-tech li {
  font-family: var(--agnostic-font-body, "Source Sans Pro", sans-serif);
  font-size: 1.25rem;
  line-height: 1.6;
  margin-bottom: 0.75rem;
}

.body-tech ul,
.body-tech ol {
  padding-left: 1.5rem;
}

.techImage {
  margin-right: 1em;
	width: clamp(15em, 50%, 25em);
	float: left;
	padding-bottom: 0.5em;
	padding-right: 0.5em;
}

.techDetails {
  font-size: 1.25em;
  text-align: left;
  display: inline;
  margin-bottom: 1em;
  height: 100%;
}

.techDetails p {
  margin-bottom: 0.5em;
}

h1.techName {
  text-align: center;
}

.tap-class-line {
  font-size: 1.15em;
  margin-bottom: 0.75em;
}

.green-text {
  color: limegreen;
}

@media (max-width: 768px) {
  .techImage {
    float: none;
    margin-right: 0;
    width: 100%;
    display: block;
  }

  .techDetails {
    margin-bottom: 0;
  }
}
</style>
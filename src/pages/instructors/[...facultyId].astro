---
import '../../styles/global.css';
import '@fontsource/source-sans-pro';
import '@fontsource/work-sans';
import '@fontsource/cormorant-garamond';

// Component Imports
import "agnostic-vue/dist/index.css";
import { computed, ref } from "vue";
import { Image } from "astro:assets";
import TAPHeader from '../../components/TAPHeader.vue';
import TAPFooter from '../../components/TAPFooter.vue';
import { getCollection } from 'astro:content';
import Crumbs from "../../components/Crumbs.vue";
import TAPDefaultLayout from "../../layouts/default.astro";
import projectIds from '../../components/astro/ProjectIds';
import ProjectCard from '../../components/ProjectCard.vue';
import { date } from 'astro:schema';
import { Disclose } from 'agnostic-vue';
import ProjectPagination from '../../components/vue/ProjectPagination.vue';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const facultyMembers = await getCollection('instructors');
  return facultyMembers.map(faculty => ({
    params: { "facultyId": `${faculty.data.id}` },
    props: { faculty },
  }));
}

const { faculty } = Astro.props;
const { Content } = await faculty.render();

// Page title
let title = `${faculty.data.name} - Faculty Profile`;
import EmptyImage from '/public/techs/empty.png'
const facultyImg = faculty.data.image?.src || EmptyImage.src;

const projects = await getCollection('projects');

const relatedProjects = projects.filter(project =>
  project.data.instructors?.includes(faculty.data.id) ||
  project.data.instructors?.includes(faculty.data.name)
);

const groupedProjects = {};

relatedProjects.forEach(project => {
  const semester = project.data.semester?.toUpperCase() || "UNKNOWN";
  const year = project.data.year || "UNKNOWN";
  const key = `${semester} ${year}`;

  if (!groupedProjects[key]) {
    groupedProjects[key] = [];
  }

  groupedProjects[key].push(project);
});
---
<TAPDefaultLayout title={title}>
  <Crumbs pageType="faculty" pageUrl={`/instructors/${faculty.data.id}`} />
  <div class="body-faculty">

    { faculty.data.name &&   <h1 class="facultyName">{faculty.data.name}</h1>}
    { faculty.data.title && <h3 class="facultyTitle">{faculty.data.title}</h3>}
    <div class="facultyText">
    { facultyImg &&  <img src={facultyImg} alt="Faculty Photo" class="facultyImage" />}  
  <!-- <div class="col2"> removed because aligning center-->
    <h3 class="about">About Me</h3>
        {faculty.data.email && <p><strong>Email: </strong><a href={`mailto:${faculty.data.email}`}>{faculty.data.email}</a></p>}
        {faculty.data.phone && <p><strong>Phone: </strong>{faculty.data.phone}</p>}
        {faculty.data.website && <p><strong>Website: </strong><a href={faculty.data.website} target="_blank">{faculty.data.website}</a></p>}
        {faculty.data.linkedin && <p><strong>LinkedIn: </strong><a href={faculty.data.linkedin} target="_blank">{faculty.data.linkedin}</a></p>}
        {faculty.data.github && <p><strong>GitHub: </strong><a href={faculty.data.github} target="_blank">{faculty.data.github}</a></p>}
        {faculty.data.desc && <p>{faculty.data.desc}</p>}
      <!-- </div>     -->
    </div>
    <Content />
    
    <div style="clear: both;"></div>

    {Object.keys(groupedProjects).length > 0 && (
        <Disclose isBackground title="TAP Classes Taught">
        {Object.entries(groupedProjects).map(([term, projects]) => {
          const projectTitles = (projects as typeof relatedProjects).map(p => p.data.shortTitle).join(', ');
          return (
            <div class="tap-class-line">
              <b>{term}</b> :{" "} 
              <span class="green-text">
                {(projects as typeof relatedProjects).map((p, index) => {
                  const year = p.data.year;
                  const semester = p.data.semester?.toLowerCase();
                  const id = p.data.id;
                  const url = `/projects/${year}/${semester}/${id}`; 
                  return (
                    <>
                      <a href={url} target="_blank" rel="noopener noreferrer">
                        {p.data.shortTitle}
                      </a>
                      {index < (projects as typeof relatedProjects).length - 1 && ", "}
                    </>
                  );
                })}
              </span>
            </div>
          );
        })}
        </Disclose>
    )}

    {relatedProjects.length > 0 &&(
      <h2>Related Projects Included</h2>
      
        <ProjectPagination client:load projects={relatedProjects} />
      
    )}
  </div>
<!-- </div> -->

</TAPDefaultLayout>

<style>
  .facultyImage {
    margin-top: 1.125em;
    margin-right: 1em;
    width: clamp(15em, 50%, 25em);
    float: left;
    padding-right: 0.5em;
  }

  .facultyText {
    font-size: 1.25em;
    text-align: left;
    display: inline;
    margin-bottom: 1em;
    height: 100%;
  }

  .col2 {
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* Ensure content takes the full height */
    text-align: left;
    height: max-content;
  }

  .facultyText p {
    margin-bottom: 0.5em;
  }

  h1.facultyName {
    text-align: center;
  }

  h2.facultyTitle {
    text-align: center;
    margin: 0.5em 0 1em;
  }
h3.about{
  text-align: left;
  margin: 0.5em 0;
}
  /* Media query for mobile devices */
  @media (max-width: 768px) {
    .facultyImage {
      float: none;
      margin-right: 0;
      width: 100%;
      display: block;
    }

    .col2 {
      display: block;
      width: 100%;
    }

    .facultyText {
      margin-bottom: 0;
    }
  }

.tap-class-line {
  font-size: 1.15em;
  margin-bottom: 0.75em;
}

.green-text {
  color: limegreen;
}
</style>

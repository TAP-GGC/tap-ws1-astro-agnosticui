---
import '../../styles/global.css';
import '@fontsource/source-sans-pro';
import '@fontsource/work-sans';
import '@fontsource/cormorant-garamond';

// Component Imports
import "agnostic-vue/dist/index.css";
import { Image } from "astro:assets";
import TAPHeader from '../../components/TAPHeader.vue';
import TAPFooter from '../../components/TAPFooter.vue';
import { getCollection } from 'astro:content';
import Crumbs from "../../components/Crumbs.vue";
import projectIds from '../../components/astro/ProjectIds';
import ProjectCard from '../../components/ProjectCard.vue';
import studentIds  from '../../components/astro/StudentIds';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  // const students = await getCollection('students');
  // add collection calls for projects 
  //project pages for student (a script that replaces space in names with '-')
  return Object.keys(studentIds).map(studentId => ({
    params: { studentId },
    props:  {student: studentIds[studentId]} 
  }));
}

const { student } = Astro.props;
const isFallbackStudent = student.data.fallback === true;
const { Content } = student.body? await student.render() : { Content: () => null };

// TODO : Find a way to map projects for students without pages
const projects = await getCollection('projects'); 
// const studentProjects = projects.filter(project => project.data.students?.includes(studentIds));

// Page title
let title = `${student.data.name} - Student Profile`;
import JohnDoeImage from '../../content/students/JohnDoe/johndoe.jpg'
const studentImg = student.data.image || JohnDoeImage;
import TAPDefaultLayout from "../../layouts/default.astro";

const studentProjects = projects.filter(project =>
  project.data.students?.includes(student.data.id) ||
  project.data.curator?.includes(student.data.id) ||
  project.data.students?.includes(student.data.name) ||
  project.data.curator?.includes(student.data.name)
);

const studentOnlyProjects = studentProjects.filter(project =>
  project.data.students?.includes(student.data.id) ||
  project.data.students?.includes(student.data.name)
);
---
<TAPDefaultLayout title={title}>
  <Crumbs pageType="student" pageUrl={`/students/${student.data.id}`}/>

  <div class="body-student">
    <h1 class="studentName">{student.data.name}</h1>
    {student.data.title && <h2 class="studentTitle">{student.data.title}</h2>}

    <div class="studentDetails">
      {studentImg && <Image src={studentImg} alt="student Photo" class="studentImage" />}
      <!-- <div class="col2"> removed because aligning center -->
        {student.data.desc && <h3>About Me</h3>}
        {student.data.desc && <p>{student.data.desc}</p>}
        {student.data.gradYear && <p><b>Graduation year: </b> {student.data.gradYear}</p>}
        
        {student.data.phone && <p><b>Phone: </b> {student.data.phone}</p>}
        {student.data.location && <p><b>Location: </b> {student.data.location}</p>}
        {student.data.website && <p><b>Website: </b> <a href={student.data.website} target="_blank">{student.data.website}</a></p>}
        {student.data.linkedin && <p><b>LinkedIn: </b> <a href={student.data.linkedin} target="_blank">{student.data.linkedin}</a></p>}
        {student.data.github && <p><b>GitHub: </b> <a href={student.data.github} target="_blank">{student.data.github}</a></p>}

      <!-- </div> -->
    </div>
    <Content />
    {studentOnlyProjects.length > 0 && (
      <>
        <h3>TAP Project Specifications</h3>
          <ul class="no-bullets">
            {studentOnlyProjects.map(project => {
                const semester = project.data.semester?.toUpperCase();
                const year = project.data.year;
                const advisors = project.data.instructors?.map(name =>
                          `Dr. ${name.split('-').map(part => part.charAt(0).toUpperCase() + part.slice(1)).join(' ')}`);
                const techs = project.data.techs?.join(', ');
                const difficulty = project.data.difficulty?.join(', ');
                const levels = project.data.levels?.join(', ');
                const durations = project.data.durationMins?.map(d => `${d} minutes`)?.join(', ');

            return (
              <li>
                <div class="course-info">
                  <div>
                    <b>
                    {semester && <span>{semester}</span>} 
                    {year && ` ${year}`}
                    </b>
                    {advisors?.length > 0 && <> : <span class="green-text">{advisors.join(', ')}</span></>}
                  </div>
                  {techs && <div><b>TECH:</b> <span class="green-text">{techs}</span></div>}
                  {difficulty && <div><b>DIFFICULTY:</b> <span class="green-text">{difficulty}</span></div>}
                  {levels && <div><b>TARGET AUDIENCE:</b> <span class="green-text">{levels}</span></div>}
                  {durations && <div><b>DURATION:</b> <span class="green-text">{durations}</span></div>}
                </div>
              </li>
              );
            })}
          </ul>
    
        {studentOnlyProjects.some(p => p.data.events?.length > 0) && (
          <>
            <h3>Events Attended</h3>
            <ul>
              {studentOnlyProjects.flatMap(p =>
                p.data.events?.map(event => <li>{event}</li>) || []
              )}
            </ul>
          </>
        )}
      </>
    )}

    {studentProjects.length > 0 && (
      <h3>Related Projects Included</h3>
      <section class="mbe40 project-cards-flex flex flex-row flex-grow-1 flex-shrink-1 flex-wrap flex-fill">
        {studentProjects.map((project) => (      
          <ProjectCard item={projectIds[project.data.id]} />
        ))}
      </section>
    )}
  </div>

  
</TAPDefaultLayout>

<style>
  .no-bullets {
    list-style: none;
    padding-left: 0;
  }

  .course-info {
  font-size: 1.125em;
  line-height: 1.6em;
  margin-bottom: 2em;
  }

  .course-info div {
    margin-bottom: 0.4em;
  }

  .green-text {
    color: limegreen;
  }

  .studentImage {
    margin-right: 1em;
		width: clamp(15em, 50%, 25em);
		float: left;
		padding-bottom: 0.5em;
		padding-right: 0.5em;
  }

  .studentDetails{
    font-size: 1.125em; 
		text-align: left;
		vertical-align: bottom; 			
		display: inline-block;
		margin-bottom: em;
    height: 100%;
  }

  .col2{
  display: flex;
  flex-direction: column; /* Stack the content vertically */
  justify-content: space-between; /* Ensure content takes the full height */
  text-align: left;
  height: max-content;
  }

  .portfolio{
  clear: both; /* Ensure portfolio is placed below floating content */
  margin-top: 2em; 
  margin-bottom: 2em;
  }

  .studentDetails p {
    margin-bottom: 0.5em;
    text-align: left;

  }

  h1.studentName {
    text-align: center;
  }

  h2.studentTitle {
    text-align: center;
    margin-top: 0.5em;
    margin-bottom: 1em;

  }

  /* Media query for mobile devices */
  @media (max-width: 768px) {
    .studentImage {
      float: none; /* Remove the float */
      margin-right: 0;
      width: 100%; /* Make the image take full width */
      display: block;
    }

    .col2 {
      display: block; /* Display as block for stacking */
      width: 100%;
    }

    .studentDetails {
      margin-bottom: 0; /* Remove extra margin */
    }
  }
</style>
